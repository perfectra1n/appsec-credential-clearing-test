-
  name: 'Eye Candy'
  category: 'Forgotten Content'
  description: 'Travel back in time to the golden era of <img src="/css/geo-bootstrap/img/hot.gif"> web design.'
  difficulty: 4
  hint: 'The mentioned golden era lasted from 1994 to 2009.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/forgotten-content.html#travel-back-in-time-to-the-golden-era-of-web-design'
  key: geocitiesThemeChallenge
-
  name: 'XSS Tier 0'
  category: 'XSS'
  description: 'Perform a <i>reflected</i> XSS attack with <code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code>.'
  difficulty: 1
  hint: 'Look for an input field where its content appears in the response HTML when its form is submitted.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html#perform-a-reflected-xss-attack'
  key: reflectedXssChallenge
-
  name: 'XSS Tier 2'
  category: 'XSS'
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> bypassing a <i>client-side</i> security mechanism.'
  difficulty: 3
  hint: 'Only some input fields validate their input. Even less of these are persisted in a way where their content is shown on another screen.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html#perform-a-persisted-xss-attack-bypassing-a-client-side-security-mechanism'
  key: persistedXssChallengeUser
-
  name: 'XSS Tier 4'
  category: 'XSS'
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> bypassing a <i>server-side</i> security mechanism.'
  difficulty: 4
  hint: 'The "Comment" field in the "Contact Us" screen is where you want to put your focus on.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html#perform-a-persisted-xss-attack-bypassing-a-server-side-security-mechanism'
  key: persistedXssChallengeFeedback
-
  name: 'XSS Tier 3'
  category: 'XSS'
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> without using the frontend application at all.'
  difficulty: 3
  hint: 'You need to work with the server-side API directly. Try different HTTP verbs on different entities exposed through the API.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html#perform-a-persisted-xss-attack-without-using-the-frontend-application-at-all'
  key: restfulXssChallenge
-
  name: 'XSS Tier 5'
  category: 'XSS'
  description: 'Perform a <i>persisted</i> XSS attack with <code>&lt;script&gt;alert("XSS")&lt;/script&gt;</code> through an HTTP header.'
  difficulty: 4
  hint: 'Finding a piece of displayed information that could originate from an HTTP header is the part of this challenge.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html#perform-a-persisted-xss-attack-through-an-http-header'
  key: httpHeaderXssChallenge
-
  name: 'CSRF'
  category: 'Broken Authentication'
  description: 'Change Bender''s password into <i>slurmCl4ssic</i> without using SQL Injection.'
  difficulty: 4
  hint: 'The fact that the name of this challenge is "CSRF" is already a huge hint.'
  hintUrl: 'https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html#change-benders-password-into-slurmcl4ssic-without-using-sql-injection'
  key: csrfChallenge
