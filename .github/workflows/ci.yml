name: "CI/CD Pipeline"

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Use Node.js 14.x"
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: "Install Linting tools"
        run: |
          npm install -g @angular/cli
          npm i -g standard@14
          npm i -g yaml-schema-validator
      - name: "Build Angular client"
        run: cd frontend && npm install && cd ..
      - name: "Lint code and configurations"
        run: |
          npm run lint
          npm run lint:config -- -f ./config/7ms.yml
          npm run lint:config -- -f ./config/addo.yml
          npm run lint:config -- -f ./config/bodgeit.yml
          npm run lint:config -- -f ./config/ctf.yml
          npm run lint:config -- -f ./config/default.yml
          npm run lint:config -- -f ./config/fbctf.yml
          npm run lint:config -- -f ./config/juicebox.yml
          npm run lint:config -- -f ./config/mozilla.yml
          npm run lint:config -- -f ./config/oss.yml
          npm run lint:config -- -f ./config/quiet.yml
          npm run lint:config -- -f ./config/tutorial.yml
          npm run lint:config -- -f ./config/unsafe.yml
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [10.x, 12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: "Use Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: "Cache Node.js modules"
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: "Install Angular CLI"
        run: npm install -g @angular/cli
      - name: "Build application"
        run: npm install
      - name: "Execute unit tests"
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' # FIXME Reliability issues with tests on Windows are a known issue from Travis-CI
        run: npm test
      - name: "Execute integration tests"
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' # FIXME Reliability issues with tests on Windows are a known issue from Travis-CI
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
          set NODE_ENV=test
          else
          export NODE_ENV=test
          fi
          npm run frisby
        shell: bash
      - name: "Publish coverage to Codeclimate"
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '14.x'
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          sed -i s/SF:/SF:frontend\\//g build/reports/coverage/frontend-tests/lcov.info
          ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.frontend.json build/reports/coverage/frontend-tests/lcov.info
          ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.server.json build/reports/coverage/server-tests/lcov.info
          ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.api.json build/reports/coverage/api-tests/lcov.info
          ./cc-test-reporter sum-coverage build/reports/coverage/codeclimate.*.json -p 3
          ./cc-test-reporter upload-coverage
        shell: bash
